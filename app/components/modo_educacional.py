import streamlit as st

# Mapeamento de classes para nomes completos e explica√ß√µes
CLASSES_NOMES = {
    "melanoma": "Melanoma",
    "bcc": "Carcinoma Basocelular",
    "scc": "Carcinoma Espinocelular",
    "ak": "Queratose Act√≠nica",
    "nevus": "Nevo Melanoc√≠tico",
    "df": "Dermatofibroma",
    "infl": "Les√£o Inflamat√≥ria",
    "outros": "Les√£o Indeterminada"
}

EXPLICACOES = {
    "melanoma": "A imagem apresentou assimetria, bordas irregulares, m√∫ltiplas tonalidades ou varia√ß√µes abruptas de cor ‚Äî caracter√≠sticas associadas ao melanoma, uma les√£o maligna agressiva.",
    "bcc": "A les√£o mostra brilho perolado, vasos vis√≠veis (telangiectasias) e bordas elevadas ‚Äî sinais t√≠picos do carcinoma basocelular, o c√¢ncer de pele mais comum e de crescimento lento.",
    "scc": "A superf√≠cie apresenta escamas, crostas ou ulcera√ß√µes ‚Äî padr√µes visualmente compat√≠veis com o carcinoma espinocelular, de risco intermedi√°rio.",
    "ak": "A IA detectou √°reas √°speras, com escama√ß√£o fina e tonalidade r√≥sea ou amarronzada ‚Äî caracter√≠sticas comuns em queratoses act√≠nicas, que s√£o pr√©-cancerosas.",
    "nevus": "A imagem possui bordas regulares, colora√ß√£o homog√™nea e simetria ‚Äî padr√µes t√≠picos de nevos melanoc√≠ticos benignos.",
    "df": "A IA identificou uma colora√ß√£o firme e estrutura centrada com pigmenta√ß√£o perif√©rica ‚Äî sugerindo dermatofibroma, uma les√£o cut√¢nea benigna comum.",
    "infl": "A imagem mostra sinais de inflama√ß√£o, vasos dilatados ou eritema difuso ‚Äî padr√µes compat√≠veis com les√µes vasculares ou inflamat√≥rias, geralmente n√£o malignas.",
    "outros": "A les√£o n√£o apresenta sinais claros o suficiente para classificar como melanoma, nevo ou outra classe ‚Äî a IA rotulou como ‚Äúindeterminada‚Äù por precau√ß√£o."
}

def rodar_modo_educacional(img_pil, classe_predita, confianca):
    st.subheader("üéì Modo Educacional")

    st.markdown("Antes de ver o resultado da IA, qual √© a sua hip√≥tese visual para esta imagem?")
    escolha = st.selectbox(
        "Escolha uma op√ß√£o:",
        list(CLASSES_NOMES.keys()),
        format_func=lambda x: CLASSES_NOMES[x]
    )

    st.image(img_pil, caption="Imagem em an√°lise", use_column_width=True)

    st.divider()
    st.subheader("üîç Resultado da IA")

    nome_predito = CLASSES_NOMES.get(classe_predita, classe_predita)
    explicacao = EXPLICACOES.get(classe_predita, "A IA n√£o forneceu explica√ß√µes adicionais.")

    if escolha == classe_predita:
        st.success(f"‚úîÔ∏è A IA sugeriu a **mesma classifica√ß√£o** que voc√™ selecionou: **{nome_predito}**.")
    else:
        st.warning(f"‚ö†Ô∏è A IA sugeriu uma **classifica√ß√£o diferente**: **{nome_predito}**.")

    st.markdown(f"**N√≠vel de confian√ßa estimado:** {confianca:.2%}")
    st.markdown(f"üìò **Explica√ß√£o da IA:** {explicacao}")
    st.info("Este exerc√≠cio tem finalidade exclusivamente educativa.")
